============================================================================
Jalen: Java Application Energy-Aware Real-Time Profiling (Agent & Client)
Copyright (C) 2011 Adel Noureddine, INRIA, University of Lille 1

Contact: adel.noureddine@inria.fr

Author: Adel Noureddine
============================================================================

1. Jalen prototype:
-------------------

The Jalen prototype has been build as 3 separate modules:
- Jalen Agent: a bytecode instrumentation agent for profiling applications
- Jalen Client: a real-time client for calculation energy values provided by the agent
- Jalen Client 2: a static client for analyzing energy values from a dump file

The goal of the prototype is to provide a minimal functional code to prove the viability of our approach.

Version: 0.0.1

Last update : 27/10/2011 (27 October 2011)


2. Requirements:
----------------

This prototype requires the following libraries and tools:
- Maven2 to compile and run the prototype
- ASM 3 library
- JFreeChart library


3. Usage:
---------

To build and compile all modules:
-> mvn clean package
(or run the same command for each module)

In jalen-agent module, copy asm-3.3.1.jar to the newly created target/ directory.
This file should be built in your .m2 repository, otherwise copy it from jalen-agent/src/test/resources

In order to run a program with the agent, use -javaagent property. Do not forget to add JMX properties.
For example, to run TowersOfHanoi.jar with the Jalen agent, use this command:
-> java -Xmx1024m -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxmote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -javaagent:/Path/to/jalen-agent/target/jalen-agent-0.0.1-SNAPSHOT.jar -jar src/test/resources/TowersOfHanoi.jar 100
The 100 at the end is the number of towers in the towers of hanoi program (100 should take a lot of time to solve).

Then, run the client:
-> mvn exec:java -Dexec.args="/Path/to/dumpData.txt"
The dumpData.txt file will be created automatically and stores the calculated energy information for each method (as a pie chart).
You should now see, in real time, the energy consumption each method.

When the program ends, you can the total energy consumption of the program by launching client 2:
-> mvn exec:java -Dexec.args="/Path/to/dumpData.txt"
Client 2 will read the file, analyze it and provides the total energy consumption per method as a pie chart.